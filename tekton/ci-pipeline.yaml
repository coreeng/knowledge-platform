apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ci-pipeline
  namespace: reference-service-ci
spec:
  description: |
    CI Pipeline
  params:
    - name: repo-url
      type: string
      description: The git repository URL to clone from.
    - name: refspec
      type: string
      description: ref spec to build
    - name: repo-name
      type: string
      description: The name of the repo
  workspaces:
    - name: shared-data
      description: |
        This workspace will receive the cloned git repo
    - name: git-credentials
      description: SSH Keys
  tasks:
    - name: fetch-repo
      taskRef:
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-data
        - name: ssh-directory
          workspace: git-credentials
      params:
        - name: url
          value: $(params.repo-url)
        - name: refspec
          value: $(params.refspec) #refs/pull/$(params.pr-number)/head
        - name: revision
          value: FETCH_HEAD
    - name: build
      runAfter: ["fetch-repo"]  # Wait until the clone is done before reading the readme.
      workspaces:
        - name: source
          workspace: shared-data
      taskSpec:
        workspaces:
          - name: source
        steps:
          - image: docker:20.10
            name: build
            workingDir: $(workspaces.source.path)
            securityContext:
              privileged: true
            script: |
              apk add --update make
              apk add curl
              make build
            volumeMounts:
              - mountPath: /var/run/
                name: dind-socket
        sidecars:
          - image: docker:20.10-dind
            name: docker
            args:
              - "--mtu=1452" # required for running in minikube
            securityContext:
              privileged: true
            readinessProbe:
              exec:
                command:
                  - ls
                  - /var/run/docker.sock
            volumeMounts:
              - mountPath: /var/lib/docker
                name: dind-storage
              - mountPath: /var/run/
                name: dind-socket
              - name: $(workspaces.source.volume)
                mountPath: $(workspaces.source.path)
        volumes:
          - name: dind-storage
            emptyDir: { }
          - name: dind-socket
            emptyDir: { }
    - name: docker-push
      runAfter: ["build"]
      workspaces:
        - name: source
          workspace: shared-data
      taskSpec:
        workspaces:
          - name: source
        steps:
          - image: docker:20.10
            name: build
            workingDir: $(workspaces.source.path)
            securityContext:
              privileged: true
            script: |
              apk add --update make
              apk add curl
              make docker-build
              make docker-push
            volumeMounts:
              - mountPath: /var/run/
                name: dind-socket
        sidecars:
          - image: docker:20.10-dind
            name: docker
            args:
              - "--mtu=1452"
              - "--insecure-registry=minikube:5000"
            securityContext:
              privileged: true
            readinessProbe:
              exec:
                command:
                  - ls
                  - /var/run/docker.sock
            volumeMounts:
              - mountPath: /var/lib/docker
                name: dind-storage
              - mountPath: /var/run/
                name: dind-socket
              - name: $(workspaces.source.volume)
                mountPath: $(workspaces.source.path)
        volumes:
          - name: dind-storage
            emptyDir: { }
          - name: dind-socket
            emptyDir: { }
    - name: deployed-testing
      runAfter: [ "docker-push" ]
      workspaces:
        - name: source
          workspace: shared-data
      taskSpec:
        workspaces:
          - name: source
        steps:
          - image: bitnami/kubectl:latest
            name: deploy-service
            volumeMounts:
              - mountPath: "/var/kubectl"
                name: minikube-credentials
                readOnly: true
            args:
              - "--insecure-registry=minikube:5000"
            workingDir: $(workspaces.source.path)
            env:
              - name: KUBECTL_ARGS
                value: --server=https://minikube:8443 --client-certificate=/var/kubectl/client.crt --client-key=/var/kubectl/client.key --insecure-skip-tls-verify=true
            securityContext:
              privileged: true
            script: |
              kubectl apply -f service/k8s-manifests/namespace.yml  $KUBECTL_ARGS
              kubectl apply -f service/k8s-manifests/pv-dbdata.yml  $KUBECTL_ARGS
              kubectl apply -f service/k8s-manifests/pvc-dbdata.yml  $KUBECTL_ARGS
              kubectl apply -f service/k8s-manifests/secret-db.yml  $KUBECTL_ARGS
              kubectl apply -f service/k8s-manifests/deployment-minikube.yml  $KUBECTL_ARGS
              kubectl apply -f service/k8s-manifests/expose.yml  $KUBECTL_ARGS
          - image: docker:20.10
            name: functional-tests
            workingDir: $(workspaces.source.path)
            securityContext:
              privileged: true
            env:
              - name: SERVICE_ENDPOINT
                value: http://reference-service.reference-service-showcase:80
            script: |
              apk add --update make
              make stubbed-functional
            volumeMounts:
              - mountPath: /var/run/
                name: dind-socket
          - image: bitnami/kubectl:latest
            name: teardown-service
            volumeMounts:
              - mountPath: "/var/kubectl"
                name: minikube-credentials
                readOnly: true
            args:
              - "--insecure-registry=minikube:5000"
            workingDir: $(workspaces.source.path)
            env:
              - name: KUBECTL_ARGS
                value: --server=https://minikube:8443 --client-certificate=/var/kubectl/client.crt --client-key=/var/kubectl/client.key --insecure-skip-tls-verify=true
            securityContext:
              privileged: true
            script: |
              kubectl delete deployment reference-service -n reference-service-showcase $KUBECTL_ARGS
              kubectl delete namespace reference-service-showcase $KUBECTL_ARGS
        sidecars:
          - image: docker:20.10-dind
            name: docker
            args:
              - "--mtu=1452" # required for running in minikube
            securityContext:
              privileged: true
            readinessProbe:
              exec:
                command:
                  - ls
                  - /var/run/docker.sock
            volumeMounts:
              - mountPath: /var/lib/docker
                name: dind-storage
              - mountPath: /var/run/
                name: dind-socket
              - name: $(workspaces.source.volume)
                mountPath: $(workspaces.source.path)
        volumes:
          - name: minikube-credentials
            secret:
              secretName: minikube-credentials
          - name: dind-storage
            emptyDir: { }
          - name: dind-socket
            emptyDir: { }